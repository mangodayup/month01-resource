"""
    Python核心
        一、数据基本运算
            1. 变量
                -- 定义：内存中的一块空间,存储任意数据的地址.
                -- 适用性：需要反复操作数据
            2. 为什么存在多种数据类型?
                -- 不同数据类型在内存中分配的空间大小不同
                -- 不同类型行为不同(具有的内置方法不同)
                    int    ---进制转换--->   01
                    float  ---科学计数法---> 01
                    str      ---编码--->    01
            3. Python自动内存管理机制
                --引用计数：每个对象记录被变量绑定的数量,
                          当为0时被销毁。
                          缺点：循环引用
                --标记清除：扫描全部内存空间,
                          检查不在使用的数据.
                          缺点：耗时长
                --分代回收：将全部内存分为小中大三代.
                          每次创建新数据时,都在小代分配空间.
                          当内存告急时,再触发标记清除,
                          将有用的数据升代,没用的数据销毁.
                优化内存：
                    尽少产生垃圾、自定义对象池、配置垃圾回收器
"""

data01 = 10  # 引用计数增加1
data02 = data01  # 引用计数增加1
data03 = data01  # 引用计数增加1

del data03  # 引用计数减少1
data02 = 20  # 10的引用计数减少1
data01 = None  # 10的引用计数减少1
# 数据10引用计数为0,应该被销毁

# 循环引用：两个被销毁的对象相互存储,
#         因为引用计数为1,所以在内存中不能真正销毁.
data04 = []
data05 = []
data04.append(data05)
data05.append(data04)
del data04, data05

# 0123456789
# str_result = ""
# for i in range(10):
#     # 每次循环产生一个垃圾,加快垃圾回收器工作
#     # "" "1" "12" "123" ....
#     str_result += str(i)
# print(str_result)

list_result = []
for i in range(10):
    # 每次都像同一个列表添加数据,不产生垃圾
    list_result.append(str(i))
print(list_result)

# 对象池：每次创建数据时,都判断池中是否
# 具有相同数据.如果没有则开辟空间存储。
# 如果有则直接返回内存地址,不再重复存储.
data06 = "悟空"
data07 = "悟空"
print(id(data06))
print(id(data07))